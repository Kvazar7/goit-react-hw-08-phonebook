{"version":3,"file":"static/js/509.f50cfc70.chunk.js","mappings":"+NACA,EAAiC,oCAAjC,EAA6F,2CAA7F,EAAgK,2CAAhK,EAAoO,4C,UC4EpO,EAxEoB,WAClB,IAAMA,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,KAAnB,IAC9BC,GAAOH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASI,IAAnB,IACxBC,GAASJ,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASK,MAAnB,IAExBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,OAAQL,GACN,IAAK,OACHA,EAAOK,EAAEC,OAAOC,MAChB,MAEF,IAAK,SACHN,EAASI,EAAEC,OAAOC,MAMvB,EAkBD,OACI,kBAAMC,SAjBW,SAAAH,GAMnB,GALAA,EAAEI,iBAEcb,EAASc,MACvB,SAAAC,GAAO,OAAIA,EAAQX,KAAKY,gBAAkBP,EAAEC,OAAOO,SAASb,KAAKO,MAAMK,aAAhE,IAGPE,IAAAA,OAAAA,QAAA,UAA2Bd,EAA3B,sCADF,CAKA,IAAMe,EAAOV,EAAEC,OACfJ,GAASc,EAAAA,EAAAA,IAAW,CAAEhB,KAAMe,EAAKF,SAASb,KAAKO,MAAON,OAAQc,EAAKF,SAASZ,OAAOM,SACnFQ,EAAKE,OAJJ,CAKF,EAGiCC,aAAa,MAAMC,UAAWC,EAA5D,WACE,mBAAOC,QAAQ,GAAGF,UAAWC,EAA7B,mBAEE,kBACEE,KAAK,OACLtB,KAAK,OACLuB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRlB,MAAOP,EACP0B,SAAUtB,EACVe,UAAWC,QAGf,mBAAOC,QAAQ,GAAGF,UAAWC,EAA7B,qBAEE,kBACEE,KAAK,MACLtB,KAAK,SACLuB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRlB,MAAON,EACPyB,SAAUtB,EACVe,UAAWC,QAGf,mBAAQE,KAAK,SAASH,UAAWC,EAAjC,2BAIP,E,UC1ED,EAA+B,6BAA/B,EAAkF,oCCmClF,EA7Be,WACb,IAAMO,GAAS9B,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAM6B,MAAV,IAC1BzB,GAAWC,EAAAA,EAAAA,MAKjB,OACE,mBAAOkB,QAAQ,GAAGF,UAAWC,EAA7B,oCAEE,kBAAOE,KAAK,OAAOf,MAAOoB,EAAQD,SAPrB,SAAArB,GACfH,GAAS0B,EAAAA,EAAAA,GAAUvB,EAAEwB,cAActB,MAAMuB,QAC1C,EAKyDX,UAAWC,MAiBtE,EChCGW,EAAY,YAgFT,IAAIC,EAAuB,SAA8BC,EAAGC,GACjE,OAAOD,IAAMC,CACd,EAqBM,SAASC,EAAeC,EAAMC,GACnC,IAAIC,EAAoD,kBAA3BD,EAAsCA,EAAyB,CAC1FE,cAAeF,GAEbG,EAAwBF,EAAgBC,cACxCA,OAA0C,IAA1BC,EAAmCR,EAAuBQ,EAC1EC,EAAwBH,EAAgBI,QACxCA,OAAoC,IAA1BD,EAAmC,EAAIA,EACjDE,EAAsBL,EAAgBK,oBACtCC,EA7BC,SAAkCL,GACvC,OAAO,SAAoCM,EAAMC,GAC/C,GAAa,OAATD,GAA0B,OAATC,GAAiBD,EAAKE,SAAWD,EAAKC,OACzD,OAAO,EAMT,IAFA,IAAIA,EAASF,EAAKE,OAETC,EAAI,EAAGA,EAAID,EAAQC,IAC1B,IAAKT,EAAcM,EAAKG,GAAIF,EAAKE,IAC/B,OAAO,EAIX,OAAO,CACR,CACF,CAYkBC,CAAyBV,GACtCW,EAAoB,IAAZR,EA/Gd,SAA8BS,GAC5B,IAAIC,EACJ,MAAO,CACLC,IAAK,SAAaC,GAChB,OAAIF,GAASD,EAAOC,EAAME,IAAKA,GACtBF,EAAM7C,MAGRwB,CACR,EACDwB,IAAK,SAAaD,EAAK/C,GACrB6C,EAAQ,CACNE,IAAKA,EACL/C,MAAOA,EAEV,EACDiD,WAAY,WACV,OAAOJ,EAAQ,CAACA,GAAS,EAC1B,EACDK,MAAO,WACLL,OAAQM,CACT,EAEJ,CAwF6BC,CAAqBf,GAtFnD,SAAwBF,EAASS,GAC/B,IAAIS,EAAU,GAEd,SAASP,EAAIC,GACX,IAAIO,EAAaD,EAAQE,WAAU,SAAUV,GAC3C,OAAOD,EAAOG,EAAKF,EAAME,IAC1B,IAED,GAAIO,GAAc,EAAG,CACnB,IAAIT,EAAQQ,EAAQC,GAOpB,OALIA,EAAa,IACfD,EAAQG,OAAOF,EAAY,GAC3BD,EAAQI,QAAQZ,IAGXA,EAAM7C,KACd,CAGD,OAAOwB,CACR,CAwBD,MAAO,CACLsB,IAAKA,EACLE,IAxBF,SAAaD,EAAK/C,GACZ8C,EAAIC,KAASvB,IAEf6B,EAAQI,QAAQ,CACdV,IAAKA,EACL/C,MAAOA,IAGLqD,EAAQb,OAASL,GACnBkB,EAAQK,MAGb,EAaCT,WAXF,WACE,OAAOI,CACR,EAUCH,MARF,WACEG,EAAU,EACX,EAQF,CAmCgEM,CAAexB,EAASE,GAEvF,SAASuB,IACP,IAAI5D,EAAQ2C,EAAMG,IAAIe,WAEtB,GAAI7D,IAAUwB,EAAW,CAIvB,GAFAxB,EAAQ6B,EAAKiC,MAAM,KAAMD,WAErBzB,EAAqB,CACvB,IAAIiB,EAAUV,EAAMM,aAChBc,EAAgBV,EAAQlD,MAAK,SAAU0C,GACzC,OAAOT,EAAoBS,EAAM7C,MAAOA,EACzC,IAEG+D,IACF/D,EAAQ+D,EAAc/D,MAEzB,CAED2C,EAAMK,IAAIa,UAAW7D,EACtB,CAED,OAAOA,CACR,CAMD,OAJA4D,EAASI,WAAa,WACpB,OAAOrB,EAAMO,OACd,EAEMU,CACR,CC/ID,SAASK,EAAgBC,GACvB,IAAIC,EAAeC,MAAMC,QAAQH,EAAM,IAAMA,EAAM,GAAKA,EAExD,IAAKC,EAAaG,OAAM,SAAUC,GAChC,MAAsB,oBAARA,CACf,IAAG,CACF,IAAIC,EAAkBL,EAAaM,KAAI,SAAUF,GAC/C,MAAsB,oBAARA,EAAqB,aAAeA,EAAI9E,MAAQ,WAAa,YAAc8E,CAC1F,IAAEG,KAAK,MACR,MAAM,IAAIC,MAAM,kGAAoGH,EAAkB,IACvI,CAED,OAAOL,CACR,CAEM,SAASS,EAAsBC,GACpC,IAAK,IAAIC,EAAOjB,UAAUrB,OAAQuC,EAAyB,IAAIX,MAAMU,EAAO,EAAIA,EAAO,EAAI,GAAIE,EAAO,EAAGA,EAAOF,EAAME,IACpHD,EAAuBC,EAAO,GAAKnB,UAAUmB,GAG/C,IAAIC,EAAiB,WACnB,IAAK,IAAIC,EAAQrB,UAAUrB,OAAQ0B,EAAQ,IAAIE,MAAMc,GAAQC,EAAQ,EAAGA,EAAQD,EAAOC,IACrFjB,EAAMiB,GAAStB,UAAUsB,GAG3B,IAEIC,EAFAC,EAAkB,EAOlBC,EAAwB,CAC1BC,oBAAgBpC,GAGdqC,EAAatB,EAAMR,MAQvB,GAN0B,kBAAf8B,IACTF,EAAwBE,EAExBA,EAAatB,EAAMR,OAGK,oBAAf8B,EACT,MAAM,IAAIb,MAAM,qFAAuFa,EAAa,KAKtH,IAAIC,EAAwBH,EACxBI,EAAyBD,EAAsBF,eAC/CA,OAA4C,IAA3BG,EAAoCX,EAAyBW,EAM9EC,EAAsBvB,MAAMC,QAAQkB,GAAkBA,EAAiB,CAACA,GACxEpB,EAAeF,EAAgBC,GAC/B0B,EAAqBf,EAAQf,WAAM,EAAQ,CAAC,WAG9C,OAFAuB,IAEOG,EAAW1B,MAAM,KAAMD,UAC/B,GAAEgC,OAAOF,IAENG,EAAWjB,GAAQ,WAIrB,IAHA,IAAIkB,EAAS,GACTvD,EAAS2B,EAAa3B,OAEjBC,EAAI,EAAGA,EAAID,EAAQC,IAG1BsD,EAAOC,KAAK7B,EAAa1B,GAAGqB,MAAM,KAAMD,YAK1C,OADAuB,EAAcQ,EAAmB9B,MAAM,KAAMiC,EAE9C,IAeD,OAdAE,OAAOC,OAAOJ,EAAU,CACtBN,WAAYA,EACZI,mBAAoBA,EACpBzB,aAAcA,EACdgC,WAAY,WACV,OAAOf,CACR,EACDgB,eAAgB,WACd,OAAOf,CACR,EACDgB,oBAAqB,WACnB,OAAOhB,EAAkB,CAC1B,IAEIS,CACR,EAGD,OAAOb,CACR,CACM,IAAIA,EAAgCL,EAAsBhD,GCnGpD0E,EAAmBrB,EAC5B,CAH0B,SAAA1F,GAAK,OAAIA,EAAMF,SAASG,KAAnB,EACP,SAAAD,GAAK,OAAIA,EAAM6B,MAAV,IAG7B,SAAC/B,EAAU+B,GACP,GAAK/B,EACL,OAAOA,EAAS+B,QAAO,SAAAhB,GAAO,OAAIA,EAAQX,KAAKY,cAAckG,SAASnF,EAAOf,cAA/C,GACjC,IAKQmG,EAAe,SAAAjH,GAAK,OAAIA,EAAMF,SAASoH,SAAnB,EACpBC,EAAW,SAAAnH,GAAK,OAAIA,EAAMF,SAASsH,KAAnB,ECd7B,EAAkC,yCAAlC,EAAoG,gDCepG,EAXwB,SAAC,GAA0B,IAAxBlH,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,OAAQkH,EAAS,EAATA,GACjCjH,GAAWC,EAAAA,EAAAA,MAGjB,OACE,gBAAIgB,UAAWC,EAAf,UACGpB,EADH,KACWC,EADX,KACmB,mBAAQqB,KAAK,SAAS8F,QAJxB,kBAAMlH,GAASmH,EAAAA,EAAAA,IAAcF,GAA7B,EAI6ChG,UAAWC,EAAtD,sBAGtB,ECbD,EAAiC,oCC8BjC,EAzBoB,WAClB,IAAMxB,GAAWC,EAAAA,EAAAA,IAAYgH,GAE7B,OACE,8BACuB,IAApBjH,EAASmD,QACR,eAAI5B,UAAWC,EAAf,kCAEA,eAAID,UAAWC,EAAf,SACGxB,EAASoF,KAAI,SAAArE,GACZ,OACE,SAAC,EAAD,CAEEX,KAAMW,EAAQX,KACdC,OAAQU,EAAQV,OAChBkH,GAAIxG,EAAQwG,IAHPxG,EAAQwG,GAMlB,OAKV,E,UCDD,EApBiB,WACf,IAAMjH,GAAWC,EAAAA,EAAAA,MACX6G,GAAYnH,EAAAA,EAAAA,IAAYkH,GACxBG,GAAQrH,EAAAA,EAAAA,IAAYoH,GAM1B,OAJAK,EAAAA,EAAAA,YAAU,WACRpH,GAASqH,EAAAA,EAAAA,MACV,GAAE,CAACrH,KAGF,4BACE,SAAC,EAAD,KACA,eAAIsH,MAAO,CAAEC,WAAY,IAAKC,MAAO,WAArC,0BACA,SAAC,EAAD,IACCV,IAAcE,IAAS,mDACxB,SAAC,EAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/ContactForm/contactform.module.css?dd74","components/ContactForm/contactform.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/filter.jsx","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/selector.js","webpack://react-homework-template/./src/components/ContactList/contactlistitem.module.css?7d47","components/ContactList/contactlistitem.jsx","webpack://react-homework-template/./src/components/ContactList/contactlist.module.css?f7cc","components/ContactList/contactlist.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"phonebook_form\":\"contactform_phonebook_form__Q05Pb\",\"phonebook_form__label\":\"contactform_phonebook_form__label__RIYlY\",\"phonebook_form__input\":\"contactform_phonebook_form__input__cKxia\",\"phonebook_form__button\":\"contactform_phonebook_form__button__7ql6Z\"};","import Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/services';\nimport css from '../ContactForm/contactform.module.css'\n\nconst ContactForm = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  let name = useSelector(state => state.contacts.name);\n  let number = useSelector(state => state.contacts.number);\n  \n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    switch (name) {\n      case 'name': {\n        name = e.target.value;\n        break;\n      }\n      case 'number': {\n        number = e.target.value;\n        break;\n      }\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const isMatch = contacts.find(\n      contact => contact.name.toLowerCase() === e.target.elements.name.value.toLowerCase()\n    );\n    if (isMatch) {\n      Notiflix.Notify.warning(`${name} is already in contacts list!`);\n      return;\n    }\n\n    const form = e.target;\n    dispatch(addContact({ name: form.elements.name.value, number: form.elements.number.value }));\n    form.reset();\n  };\n\n  return (\n      <form onSubmit={handleSubmit} autoComplete=\"off\" className={css.phonebook_form}>\n        <label htmlFor=\"\" className={css.phonebook_form__label}>\n          Name:\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleChange}\n            className={css.phonebook_form__input}\n          />\n        </label>\n        <label htmlFor=\"\" className={css.phonebook_form__label}>\n          Number:\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleChange}\n            className={css.phonebook_form__input}\n          />\n        </label>\n        <button type=\"submit\" className={css.phonebook_form__button}>Add contact</button>\n      </form>\n    );\n  \n}\n\nexport default ContactForm;\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from 'redux/services';\n// import { selectContacts } from 'redux/selector';\n// import TextField from '@mui/material/TextField';\n// import Button from '@mui/material/Button';\n// import css from '../ContactForm/contactform.module.css';\n\n// const ContactForm = () => {\n//   const contacts = useSelector(selectContacts);\n//   let name = useSelector(state => state.contacts.name);\n//   let number = useSelector(state => state.contacts.number);\n\n//   const dispatch = useDispatch();\n\n//   const handleInputChange = e => {\n//     switch (e.target.name) {\n//       case 'name':\n//         name = e.target.value;\n//         break;\n\n//       case 'number':\n//         number = e.target.value;\n//         break;\n\n//       default:\n//         return;\n//     }\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const contExist = contacts.find(\n//       contact => contact.name.toLowerCase() === e.target.elements.name.value.toLowerCase()\n//     );\n//     if (contExist) {\n//       return alert(`${e.target.elements.name.value} is already in contacts list!`);\n//     }\n//     const form = e.target;\n//     dispatch(addContact({ name: form.elements.name.value, number: form.elements.number.value }));\n//     form.reset();\n//   };\n\n\n//     return (\n//       <form onSubmit={handleSubmit} className={css.contactForm}>\n//         <TextField\n//           // id=\"outlined-basic\"\n//           label=\"Name\"\n//           variant=\"outlined\"\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//           required\n//           onChange={handleInputChange}\n//           sx={{\n//             mt: 5,\n//             ml: 5,\n//             width: 300,\n//           }}\n//         />\n//         <TextField\n//           // id=\"outlined-basic\"\n//           label=\"Number\"\n//           variant=\"outlined\"\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//           required\n//           onChange={handleInputChange}\n//           sx={{\n//             mt: 5,\n//             ml: 5,\n//             width: 300,\n//           }}\n//         />\n//         <Button\n//           variant=\"contained\"\n//           type=\"submit\"\n//           sx={{\n//             mt: 5,\n//             ml: 5,\n//             mb: 5,\n//             maxWidth: '300px',\n//           }}\n//         >\n//           Add contact\n//         </Button>\n//       </form>\n//     );\n// }\n  \n// export default ContactForm;","// extracted by mini-css-extract-plugin\nexport default {\"filter_label\":\"filter_filter_label__fXA62\",\"filter_label__input\":\"filter_filter_label__input__qC6j5\"};","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addFilter } from 'redux/filterSlice';\nimport css from '../Filter/filter.module.css'\n\n// import TextField from '@mui/material/TextField';\n\nconst Filter = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n  const onChange = e => {\n    dispatch(addFilter(e.currentTarget.value.trim()))\n  }\n  \n  return (\n    <label htmlFor=\"\" className={css.filter_label}>\n      Find contacts by Name:\n      <input type=\"text\" value={filter} onChange={onChange} className={css.filter_label__input} />\n    </label>\n\n    //  <TextField\n    //   autoComplete='off'\n    //   label=\"Find contacts by name\"\n    //   variant=\"outlined\"\n    //   type=\"text\"\n    //   value={filter}\n    //   onChange={onChange}\n    //   sx={{\n    //     mt: 2,\n    //     ml: 5,\n    //     width: 300,\n    //   }}\n    // />\n  );\n}\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const filteredContacts = createSelector(\n    [selectContacts, selectFilter],\n    (contacts, filter) => {\n        if (!contacts) return;\n        return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n    }\n);\n\n// export const getContacts = state => state.contacts.items;\n// export const getFilter = state => state.filter;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n\n\n// export const getVisibleContacts = state => {\n//     const filter = getFilter(state);\n//     const contacts = getContacts(state);\n//     const normalizedFilter = filter.toLocaleLowerCase();\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizedFilter)\n//     );\n//   };","// extracted by mini-css-extract-plugin\nexport default {\"contactlistitem\":\"contactlistitem_contactlistitem__NFLMr\",\"contactlistitem_button\":\"contactlistitem_contactlistitem_button__jk1pe\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/services';\nimport css from '../ContactList/contactlistitem.module.css'\n\nconst ContactListItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  const delContact = () => dispatch(deleteContact(id));\n\n  return (\n    <li className={css.contactlistitem}>\n      {name}: {number} <button type=\"button\" onClick={delContact} className={css.contactlistitem_button}>Delete</button>\n    </li>\n  );\n};\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"contactlist_ul\":\"contactlist_contactlist_ul__EKo6r\"};","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { filteredContacts } from 'redux/selector'\nimport ContactListItem from '../ContactList/contactlistitem';\nimport css from '../ContactList/contactlist.module.css'\n\nconst ContactList = () => {\n  const contacts = useSelector(filteredContacts);\n\n  return (\n    <>\n      {contacts.length === 0 ? (\n        <h3 className={css.contactlist_ul}>There is no contact</h3>\n      ) :\n        <ul className={css.contactlist_ul}>\n          {contacts.map(contact => {\n            return (\n              <ContactListItem\n                key={contact.id}\n                name={contact.name}\n                number={contact.number}\n                id={contact.id}\n              />\n            );\n          })}\n        </ul>\n      } \n    </>\n  );\n}\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n      onClick: PropTypes.func,\n    })\n  ),\n};\n\n// import PropTypes from 'prop-types';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { deleteContact } from 'redux/services';\n\n\n// // import { getVisibleContacts } from 'redux/selectors';\n// import { filteredContacts } from 'redux/selector'\n\n// // import authSelectors from 'redux/auth/auth-selectors';\n// import authSelectors from 'redux/auth/authSelectors'\n\n// import { List, ListItem, Button } from '@mui/material';\n\n// const ContactList = () => {\n//   const dispatch = useDispatch();\n//   const isLoggedIn = useSelector(authSelectors.getIsLoggedin);\n//   const visibleContacts = useSelector(filteredContacts);\n//   const handleDelete = id => dispatch(deleteContact(id));\n\n//   return (\n//     <List>\n//       {isLoggedIn &&\n//         visibleContacts.map(contact => (\n//           <ListItem key={contact.id} sx={{display: 'flex', justifyContent: 'space-between', maxWidth: 400, fontWeight: 500}}>\n//             {contact.name}: {contact.number}\n//             <Button\n//               variant=\"contained\"\n//               type=\"button\"\n//               onClick={() => {\n//                 handleDelete(contact.id);\n//               }}\n//               sx={{\n//                 ml: 5,\n//                 maxWidth: '300px',\n//               }}\n//             >\n//               Delete\n//             </Button>\n//           </ListItem>\n//         ))}\n//     </List>\n//   );\n// };\n\n// export default ContactList;\n\n// ContactList.propTypes = {\n//   value: PropTypes.array,\n//   onDeleteContact: PropTypes.func,\n// };\n","import ContactForm from '../components/ContactForm/contactform';\nimport Filter from '../components/Filter/filter';\nimport ContactList from '../components/ContactList/contactlist';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../redux/services';\nimport { getError, getIsLoading } from '../redux/selector';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n  \n  return (\n    <div>\n      <ContactForm />\n      <h2 style={{ marginLeft: 120, color: '#2948ad' }}>My Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactList />\n    </div>\n  );\n};\n\nexport default Contacts;"],"names":["contacts","useSelector","state","items","name","number","dispatch","useDispatch","handleChange","e","target","value","onSubmit","preventDefault","find","contact","toLowerCase","elements","Notiflix","form","addContact","reset","autoComplete","className","css","htmlFor","type","pattern","title","required","onChange","filter","addFilter","currentTarget","trim","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","filteredContacts","includes","getIsLoading","isLoading","getError","error","id","onClick","deleteContact","useEffect","getContacts","style","marginLeft","color"],"sourceRoot":""}